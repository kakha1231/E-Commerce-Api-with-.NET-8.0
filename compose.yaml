services:
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - backend
    ports:
      - "5672:5672"         
      - "15672:15672"      
  
  api-gateway:
    image: api-gateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    networks:
      - backend
    ports:
      - "5000:5000"
      
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL_HOST=keycloak-db
      - KC_DB_URL_DATABASE=keycloakDatabase
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=password123
    networks:
      - backend
      - keycloak-database
    ports:
      - "8080:8080"
    volumes:
      - keycloak-data-volume:/var/lib/keycloak/data
  
  authorization-service:
    image: authorization-service
    build:
      context: .
      dockerfile: AuthorizationService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    networks:
      - backend
    ports:
      - "5001:5001"
        
  order-service:
    image: order-service
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    networks:
      - backend
      - order-database
    ports:
      - "5002:5002"
  
  product-service:
    image: product-service
    build:
      context: .
      dockerfile: ProductService/Dockerfile  
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    networks:
      - backend
      - product-database
    ports:
      - "5003:5003"
  
  keycloak-db:
    image: postgres:15
    environment:
      POSTGRES_DB: keycloakDatabase
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password123
    networks:
      - keycloak-database
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
  
  product-db:
    image: postgres:15
    environment:
      POSTGRES_DB: productDatabase
      POSTGRES_USER: product
      POSTGRES_PASSWORD: password123
    networks:
      - product-database
    ports:
      - "5433:5432"
    volumes:
      - pgdata1:/var/lib/postgresql/data
  
  order-db:
    image: postgres:15
    environment:
      POSTGRES_DB: orderDatabase
      POSTGRES_USER: order
      POSTGRES_PASSWORD: password123
    networks:
      - order-database
    ports:
      - "5434:5432"
    volumes:
      - pgdata2:/var/lib/postgresql/data
    
  mongo-db:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"  # Expose MongoDB on the default port
    volumes:
      - mongo_data:/data/db  # Persist MongoDB data in a named volume
    networks:
      - mongodb_network
      - backend
    
  
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"  
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-db
      - ME_CONFIG_MONGODB_PORT=27017
    depends_on:
       mongodb:
         condition: service_started
    networks:
      - mongodb_network
      

volumes:
  pgdata:
  pgdata1:
  pgdata2:
  keycloak-data-volume:
  mongo_data:

networks:
  backend:
  auth-network:
  keycloak-database:  
  product-database:
  order-database:
  mongodb_network:
    driver: bridge
  





  

  
